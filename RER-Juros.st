Object subclass: #Juros	instanceVariableNames: 'quantidade composto periodo pagamentos pesos'	classVariableNames: ''	poolDictionaries: ''	category: 'RER-Juros'!!Juros commentStamp: 'shout 5/16/2024 09:07' prior: 0!13/05/2024: atributos 14/05/2024: inicialização acessos, cálculos - classe com os dados para simplificar as chamadas!!Juros methodsFor: 'calculation' stamp: 'shout 5/16/2024 09:08'!acrescimoParaJuros: acrescimo	"calcula os juros a partir do acréscimo e dados comuns (como parcelas) e valores padrão"	^  self acrescimoParaJuros: acrescimo precisao: 15 maxIteracoes: 100 maxJuros: 50.0! !!Juros methodsFor: 'calculation' stamp: 'shout 5/16/2024 09:08'!acrescimoParaJuros: acrescimo precisao: prec	"calcula os juros a partir do acréscimo e dados comuns (como parcelas) e valores padrão"	^  self acrescimoParaJuros: acrescimo precisao: prec maxIteracoes: 100 maxJuros: 50.0! !!Juros methodsFor: 'calculation' stamp: 'shout 5/16/2024 09:08'!acrescimoParaJuros: acrescimo precisao: prec maxIteracoes: mIteracoes	"calcula os juros a partir do acréscimo e dados comuns (como parcelas) e valores padrão"
	^  self acrescimoParaJuros: acrescimo precisao: prec maxIteracoes: mIteracoes maxJuros: 50.0! !!Juros methodsFor: 'calculation' stamp: 'shout 5/16/2024 09:09'!acrescimoParaJuros: acrescimo precisao: prec maxIteracoes: mIteracoes maxJuros: mJuros	"calcula os juros a partir do acréscimo e dados comuns (como parcelas)"	| pesoTotal minJuros medJuros maxJuros minDiferenca |	pesoTotal := self getPesoTotal.	(((mIteracoes < 1) or: (quantidade < 1) or: (prec < 1) or: (periodo <= 0.0)) or: ((acrescimo <= 0.0) or: (mJuros <= 0.0) or: (pesoTotal <= 0.0)))		ifTrue: [ ^ 0.0 ].			minJuros := 0.0.	maxJuros := mJuros.	minDiferenca := (0.1 raisedTo: prec).		1 to: mIteracoes do:	[ :indice |		medJuros := (minJuros + maxJuros) / 2.0.		((maxJuros - minJuros) < minDiferenca)			ifTrue: [ ^ medJuros ].		((self jurosParaAcrescimo: medJuros) < acrescimo )			ifTrue: [ minJuros := medJuros ]			ifFalse: [ maxJuros := medJuros ]	].	^ medJuros! !!Juros methodsFor: 'calculation' stamp: 'shout 5/16/2024 09:09'!getPesoTotal	"calcula a somatória de Pesos[]"	| acumulador |	acumulador := 0.0.	1 to: quantidade do: [ :indice | acumulador := acumulador + (pesos at: indice)].	^ acumulador! !!Juros methodsFor: 'calculation' stamp: 'shout 5/16/2024 09:10'!jurosParaAcrescimo: juros	"calcula o acréscimo a partir dos juros e dados comuns (como parcelas)"	| pesoTotal acumulador |	pesoTotal := self getPesoTotal.	((quantidade < 1) or: (juros <= 0.0) or: (periodo <= 0.0) or: (pesoTotal <= 0.0))		ifTrue: [ ^ 0.0 ].	acumulador := 0.0.		1 to: quantidade do:	[ :indice |		(composto)			ifTrue: [ acumulador := acumulador + ((pesos at: indice) / ((1.0 + (juros / 100.0)) raisedTo: ((pagamentos at: indice) / periodo))) ]			ifFalse: [ acumulador := acumulador + ((pesos at: indice) / (1.0 + (juros / 100.0 * (pagamentos at: indice) / periodo))) ]	].	^ ((pesoTotal / acumulador) - 1.0) * 100.0	! !!Juros methodsFor: 'initialization' stamp: 'shout 5/16/2024 09:09'!initialize	"inicialização dos atributos (com 'zeros')"	super initialize.	quantidade := 0.	composto := false.	periodo := 0.0.	pagamentos := OrderedCollection new.	pesos := OrderedCollection new.	! !!Juros methodsFor: 'accessing' stamp: 'shout 5/14/2024 17:32'!composto	^ composto! !!Juros methodsFor: 'accessing' stamp: 'shout 5/14/2024 17:32'!composto: c	composto := c! !!Juros methodsFor: 'accessing' stamp: 'shout 5/14/2024 17:33'!pagamentos	^ pagamentos! !!Juros methodsFor: 'accessing' stamp: 'shout 5/14/2024 17:33'!pagamentos: p	pagamentos := p! !!Juros methodsFor: 'accessing' stamp: 'shout 5/14/2024 17:32'!periodo	^ periodo! !!Juros methodsFor: 'accessing' stamp: 'shout 5/14/2024 17:33'!periodo: p	periodo := p! !!Juros methodsFor: 'accessing' stamp: 'shout 5/14/2024 17:33'!pesos	^pesos! !!Juros methodsFor: 'accessing' stamp: 'shout 5/14/2024 17:34'!pesos: p	pesos := p! !!Juros methodsFor: 'accessing' stamp: 'shout 5/14/2024 17:31'!quantidade	^ quantidade! !!Juros methodsFor: 'accessing' stamp: 'shout 5/14/2024 17:32'!quantidade: q	quantidade := q! !Object subclass: #TestaJuros	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'RER-Juros'!!TestaJuros commentStamp: 'shout 5/16/2024 09:07' prior: 0!Crie um objeto de TestaJuros e mande a mensagem testaJuros para testar os cálculos!!TestaJuros methodsFor: 'testing' stamp: 'shout 5/15/2024 13:50'!testaJuros	| juros |	juros := Juros new.	juros quantidade: 3.	juros composto: true.	juros periodo: 30.0.	(juros pagamentos) add: 30.0.	(juros pagamentos) add: 60.0.	(juros pagamentos) add: 90.0.	(juros pesos) add: 1.0.	(juros pesos) add: 1.0.	(juros pesos) add: 1.0.	Transcript showln: 'Peso total = ', (juros getPesoTotal).	Transcript showln: 'Acréscimo = ', (juros jurosParaAcrescimo: 3.0).	Transcript showln: 'Juros = ', (juros acrescimoParaJuros: (juros jurosParaAcrescimo: 3.0) precisao: 15 maxIteracoes: 100 maxJuros: 50.0).! !